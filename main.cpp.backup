/**
 * Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

// https://paulbupejr.com/raspberry-pi-pico-windows-development/
/**
 * pg. 28 multicore; mutex
 * 
 * 
 * 
 */

#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/pio.h"
#include "hx711.pio.h"

int main() {

    stdio_init_all();

    const uint clockPin = 14;
    const uint dataPin = 15;

    gpio_init(clockPin);
    gpio_init(dataPin);
    gpio_init(PICO_DEFAULT_LED_PIN);
    gpio_set_dir(PICO_DEFAULT_LED_PIN, GPIO_OUT);
    gpio_set_dir(clockPin, GPIO_OUT);
    gpio_set_dir(dataPin, GPIO_IN);
    gpio_pull_up(dataPin);
    gpio_put(clockPin, 0);

    uint8_t pinVal;
    int32_t val;

    for(;;) {

        pinVal = 0;
        val = 0;

        while(gpio_get(dataPin) != 0) {
            sleep_us(1);
        }

        gpio_put(PICO_DEFAULT_LED_PIN, 1);
        sleep_ms(10);
        gpio_put(PICO_DEFAULT_LED_PIN, 0);

        //T1
        sleep_us(1);

        for(int i = 0; i < 24; ++i) {
            gpio_put(clockPin, 1);
            sleep_us(25); //T3
            gpio_put(clockPin, 0);
            pinVal = (uint8_t)gpio_get(dataPin);
            //printf("%u\n", pinVal);
            val <<= 1;
            val |= pinVal;
            sleep_us(10); //T4
        }

        //printf("\n");

        for(int i = 0; i < 1; ++i) {
            gpio_put(clockPin, 1);
            sleep_us(25);
            gpio_put(clockPin, 0);
            sleep_us(10);
        }

        printf("val is %i\n", val);
        sleep_ms(1000);

    }



/*
    sleep_ms(5000);
    printf("starting...\n");

    PIO pio = pio0;

    uint offset = pio_add_program(pio, &hx711_program);
    uint sm = pio_claim_unused_sm(pio, true);
    hx711_program_init(pio, sm, offset, 14, 15);

    printf("Starting to read\n");

    while(true) {

        printf("raw: %i\n", (int)gpio_get(15));

        //printf("putting value\n");
        pio_sm_put(pio, sm, (uint32_t)25);
        //printf("sleeping\n");
        sleep_ms(10);
        //printf("getting value\n");
        uint32_t val = pio_sm_get(pio, sm);

        printf("value: %u\n", val);
        sleep_ms(250);

    }

    return 0;

*/

/*
#ifndef PICO_DEFAULT_LED_PIN
#warning blink example requires a board with a regular LED
#else
    const uint LED_PIN = PICO_DEFAULT_LED_PIN;
    gpio_init(LED_PIN);
    gpio_set_dir(LED_PIN, GPIO_OUT);
    while (true) {
        gpio_put(LED_PIN, 1);
        sleep_ms(250);
        gpio_put(LED_PIN, 0);
        sleep_ms(250);
    }
#endif
*/

}
